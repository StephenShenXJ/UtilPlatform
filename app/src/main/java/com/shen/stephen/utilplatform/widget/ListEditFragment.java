package com.shen.stephen.utilplatform.widget;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.shen.stephen.utilplatform.R;

public abstract class ListEditFragment extends PkiFragment implements
		PkiFragment.OnFinishListener {
	/**
	 * The single text edit request code.
	 */
	protected static final int SINGLE_TEXT_EDIT_REQUEST_CODE = 100;

	/**
	 * The list select request code.
	 */
	protected static final int LIST_SELECT_REQUEST_CODE = 101;

	/**
	 * The list select edit request code.
	 */
	protected static final int LIST_SELECT_EDIT_REQUEST_CODE = 102;

	/**
	 * Request code mask use to specify which item starts to edit.
	 */
	protected static final int REQUEST_CODE_MASK = 0xff;

	/**
	 * decide if the submit button is needed;
	 */
	private boolean needDoneItem = true;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(needDoneItem);
	}

	public void setIsNeedDoneItem(boolean b) {
		needDoneItem = b;
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		if (needDoneItem) {
			inflater.inflate(R.menu.action_done_menu, menu);
		}
		super.onCreateOptionsMenu(menu, inflater);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		if (item.getItemId() == R.id.action_done) {
			onActionDoneClicked();
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onFinishEdit(int requestCode, int resultCode, Intent resultData) {
		processResult(requestCode, resultCode, resultData);
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		processResult(requestCode, resultCode, data);
	}

	/**
	 * The callback method for done action item clicked
	 */
	protected abstract void onActionDoneClicked();

	/**
	 * Receive the result from a previous call to
	 * {@link #startActivityForResult(Intent, int)}. This follows the related
	 * Activity API as described there in
	 * {@link Activity#onActivityResult(int, int, Intent)}.
	 *
	 * @param requestCode
	 *            The integer request code originally supplied to
	 *            startActivityForResult(), allowing you to identify who this
	 *            result came from. The result code generated by the method
	 *            {@link #genRequestCode(int, int)}.
	 * @param resultCode
	 *            The integer result code returned by the child activity through
	 *            its setResult().
	 * @param data
	 *            An Intent, which can return result data to the caller (various
	 *            data can be attached to Intent "extras").
	 */
	protected void processResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == Activity.RESULT_CANCELED) {
			return;
		}

		// get the id of the request item.
		int id = (requestCode >>> 8) & REQUEST_CODE_MASK;

		// Get the real request code
		requestCode = requestCode & REQUEST_CODE_MASK;

		onProcessResult(requestCode, id, resultCode, data);
	}

	/**
	 * Receive the result from a previous call to
	 * {@link #startActivityForResult(Intent, int)}. This follows the related
	 * Activity API as described there in
	 * {@link Activity#onActivityResult(int, int, Intent)}.
	 *
	 * @param requestCode
	 *            The real integer request code, the code is same as the
	 *            {@code requestCode} when you call
	 *            {@link #genRequestCode(int, int)}
	 * @param id
	 *            the id of this result. It is same as the {@code id} when you
	 *            call {@link #genRequestCode(int, int)}
	 * @param resultCode
	 *            The integer result code returned by the child activity through
	 *            its setResult().
	 * @param resultData
	 *            An Intent, which can return result data to the caller (various
	 *            data can be attached to Intent "extras").
	 */
	protected abstract void onProcessResult(int requestCode, int id,
											int resultCode, Intent resultData);

	/**
	 * Generate a unique request code that can identify which item requests
	 * starting the edit activity.
	 *
	 * @param id
	 *            the id of item which wants to start edit activity.
	 * @param requestCode
	 *            the common request code,
	 *            {@link #SINGLE_TEXT_EDIT_REQUEST_CODE} or
	 *            {@link #LIST_SELECT_REQUEST_CODE}.
	 * @return a unique request code.
	 * @throws Exception
	 */
	protected int genRequestCode(int id, int requestCode) {
		if (((id >>> 8) & 0xff) != 0 || ((requestCode >>> 8) & 0xff) != 0) {
			try {
				throw new Exception("the request code or id must lower than 8 bits");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		requestCode = (id << 8) | requestCode;
		return requestCode;
	}

}
